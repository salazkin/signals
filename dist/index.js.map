{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["export class Signal<T> {\r\n  private listeners: Map<unknown, Set<(data: T) => void>> = new Map();\r\n  private onceListeners: Map<unknown, Set<(data: T) => void>> = new Map();\r\n\r\n  /**\r\n   * Adds a listener to the signal.\r\n   * @param listener - The listener function.\r\n   * @param context - The context in which the listener is called. Defaults to the Signal instance.\r\n   */\r\n  public add(listener: (data: T) => void, context?: unknown): void {\r\n    this.addListener(this.listeners, listener, context || this);\r\n  }\r\n\r\n  /**\r\n   * Adds a one-time listener to the signal.\r\n   * The listener is automatically removed after being called once.\r\n   * @param listener - The listener function.\r\n   * @param context - The context in which the listener is called. Defaults to the Signal instance.\r\n   */\r\n  public addOnce(listener: (data: T) => void, context?: unknown): void {\r\n    this.addListener(this.onceListeners, listener, context || this);\r\n  }\r\n\r\n  private addListener(\r\n    target: Map<unknown, Set<(data: T) => void>>,\r\n    listener: (data: T) => void,\r\n    context: unknown = this\r\n  ): void {\r\n    if (!target.has(context)) {\r\n      target.set(context, new Set());\r\n    }\r\n    target.get(context)?.add(listener);\r\n  }\r\n\r\n  /**\r\n   * Removes a listener from the signal.\r\n   * @param listener - The listener function to remove.\r\n   * @param context - The context in which the listener was added. Defaults to the Signal instance.\r\n   */\r\n  public remove(listener: (data: T) => void, context?: unknown): void {\r\n    this.removeListener(this.listeners, listener, context || this);\r\n    this.removeListener(this.onceListeners, listener, context || this);\r\n  }\r\n\r\n  private removeListener(\r\n    target: Map<unknown, Set<(data: T) => void>>,\r\n    listener: (data: T) => void,\r\n    context: unknown = this\r\n  ): void {\r\n    const listenerSet = target.get(context);\r\n    if (listenerSet) {\r\n      listenerSet.delete(listener);\r\n      if (listenerSet.size === 0) {\r\n        target.delete(context);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all listeners from the signal.\r\n   */\r\n  public removeAll(): void {\r\n    this.listeners.clear();\r\n    this.onceListeners.clear();\r\n  }\r\n\r\n  /**\r\n   * Dispatches the signal, calling all listeners with the provided data.\r\n   * @param data - The data to pass to the listeners.\r\n   */\r\n  public dispatch(data: T): void {\r\n    this.listeners.forEach((listeners, key) => {\r\n      listeners.forEach(listener => listener.call(key, data));\r\n    });\r\n    this.onceListeners.forEach((listeners, key) => {\r\n      listeners.forEach(listener => listener.call(key, data));\r\n    });\r\n    this.onceListeners.clear();\r\n  }\r\n\r\n  /**\r\n   * Checks if the signal has any listeners.\r\n   * @returns `true` if no listeners are registered, otherwise `false`.\r\n   */\r\n  public isEmpty(): boolean {\r\n    return this.listeners.size === 0 && this.onceListeners.size === 0;\r\n  }\r\n}\r\n\r\ntype WatchData<T> = { target: T; prop: keyof T; value: any };\r\ntype SignalSubscription<T> = {\r\n  watch: (listener: (data: WatchData<T>) => void) => { unsubscribe: () => void };\r\n};\r\n\r\n/**\r\n * Makes an object reactive by wrapping it in a Proxy.\r\n * @param data - The object to make reactive.\r\n * @returns The reactive object with a `watch` method for subscribing to changes.\r\n */\r\nexport const reactive = <T extends object>(\r\n  data: T\r\n): T & SignalSubscription<T> => {\r\n  const signal = new Signal<WatchData<T>>();\r\n\r\n  const observeHandler: ProxyHandler<any> = {\r\n    get(target, prop, receiver) {\r\n      const value = Reflect.get(target, prop, receiver);\r\n      if (typeof value === \"object\" && value !== null) {\r\n        return new Proxy(value, observeHandler);\r\n      }\r\n      return value;\r\n    },\r\n    set(target, prop: any, value, receiver) {\r\n      const oldValue = target[prop];\r\n      const result = Reflect.set(target, prop, value, receiver);\r\n      if (oldValue !== value) {\r\n        signal.dispatch({ target, prop, value });\r\n      }\r\n      return result;\r\n    },\r\n  };\r\n\r\n  const proxy = new Proxy(data, observeHandler);\r\n\r\n  (proxy as any).watch = (listener: (data: WatchData<T>) => void) => {\r\n    signal.add(listener);\r\n    return {\r\n      unsubscribe: () => signal.remove(listener),\r\n    };\r\n  };\r\n\r\n  return proxy as T & SignalSubscription<T>;\r\n};"],"names":[],"mappings":"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"}